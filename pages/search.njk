{% extends "./_includes/base-layout.njk" %}

{% block content %}
<style>
	a.gs-title,
	a.gs-title b {
		font-size: 1.5rem!important;
		font-weight: 400;
	}
	.gsc-url-top {
		display: none!important;
	}
	.gs-bidi-start-align.gs-snippet {
		font-size: 1rem;
	}
	.gsc-above-wrapper-area {
		display: none;
	}
	.gsc-control-cse {
		padding: 0;
	}
	.gsc-table-cell-thumbnail {
		display: none;
	}
	/*
	.gsc-adBlock {
		display: none;
	}
	*/
</style>

<div id="page-container" class="page-container-ds">
	<div id="main-content" class="main-content-ds single-column" tabindex="-1">
		{# The #body-content div is the skip-to-content target. #}
		<div id="body-content"></div>
		<div class="ds-content-layout">
			<main class="main-primary">
				<div>
					<article id="post-search">
						<!-- Page Title-->
						<h1 class="page-title">{{ 'Search Results' | i18n(locale) }} "<span class="query-display"></span>"</h1>
						<div class="entry-content">
							<div class="gcse-searchresults-only" data-webSearchSafesearch="active">
						</div>
					</article>
				</div>
			</main>
		</div>
	</div>
</div>
{# https://cse.google.com/cse.js?cx=001779225245372747843:o_16poin-0q #}

<script>
	function myWebResultsReadyCallback() {
		console.log("WEB RESULTS READY");
	}
	function myWebResultsRenderedCallback(gname, query, promoElts, resultElts) {
		console.log("WEB RESULTS RENDERED");
		// const colors = ['Gainsboro', 'FloralWhite'];
		// let colorSelector = 0;
		for (const result of resultElts) {
			// result.style.backgroundColor = colors[colorSelector];
			// colorSelector = (colorSelector + 1) % colors.length;
			var titles = result.getElementsByClassName('gs-title');
			console.log("elements found",titles.length);
			var gotOne = false;
			for (title of titles) {
				// get data-cturl contents if present
				if ('cturl' in title.dataset) {
					var cturl = title.dataset.cturl;
					if (cturl.includes('/search')) {
						console.log("SEARCH FOUND");
						result.style.display = 'none';
						gotOne = true;
					}
				}
			}
			// catches the occasional listing which does not have a cturl link
			if (gotOne == false && result.innerHTML.includes('/search')) {
				result.style.backgroundColor = 'red';
				result.style.display = 'none';
				gotOne = true;
			}
		}

		// var searchresults= document.getElementsByClassName("gsc-webResult");
		// console.log("Search results length: " + searchResults.length);
		// inside look for a.gs-title that contains data-cturl that contains "/search/"
		// if found, hide the parent.
	}

	function sanitize(string) {
   	   console.log("sanitize");
		const map = {
			'&': '&amp;',
			'<': '&lt;',
			'>': '&gt;',
			'"': '&quot;',
			"'": '&#x27;',
			"/": '&#x2F;',
		};
		const reg = /[&<>"'/]/ig;
		return string.replace(reg, (match)=>(map[match]));
	}
	const cx = '001779225245372747843:o_16poin-0q'; // @TODO connect this to config - value in _data/config.js is not accessible here though as config.search.cx.
	const gcse = document.createElement('script');
	gcse.type = 'text/javascript';
	gcse.async = true;
	gcse.src = 'https://cse.google.com/cse.js?language=en-US&cx=' + cx;

	// add resultsreadycallback - jbum
	// gcse.searchCallbacks.web.ready = myWebResultsReadyCallback;
	window.__gcse = {
		// parsetags: 'explicit', // Defaults to 'onload'
		// initializationCallback: myInitializationCallback,
		searchCallbacks: {
		// image: {
		//	starting: myImageSearchStartingCallback,
		//	ready: myImageResultsReadyCallback,
		//	rendered: myImageResultsRenderedCallback,
		// },
		web: {
			// starting: myWebSearchStartingCallback,
			ready: myWebResultsReadyCallback,
			rendered: myWebResultsRenderedCallback,
		},
		},
	};


	const s = document.getElementsByTagName('script');
	s[s.length - 1]
		.parentNode
		.insertBefore(gcse, s[s.length - 1]);

	const urlParam = function (name) {
		var results = new RegExp('[\?&]' + name + '=([^&#]*)').exec(window.location.search);

		return (results !== null)
			? results[1] || 0
			: false;
	}
	const urlq = urlParam('q') || '';
	const query = sanitize(decodeURIComponent(urlq.replace(/\+/g, ' ').toLowerCase()));
	document
		.querySelectorAll('input[name=q]')
		.forEach(x => x.value = query);

	document
		.querySelectorAll('.query-display')
		.forEach(x => x.innerHTML = query);
</script>

<script>
	const myWebSearchStartingCallback = query => {
		console.log('myWebSearchStartingCallback: ',query);
		if (!query) 
			return;
		
		let currentHost = `${window.location.protocol}//${window.location.hostname}`;
		if (window.location.port !== '80') {
			currentHost += `:${window.location.port}`;
		}
		history.pushState(null, null, `${currentHost}${window.location.pathname}?q=${query}`);
	}
	myWebSearchStartingCallback(query)




</script>

{% endblock %}